get:
  tags:
    - Gym
  summary: Get gym by ID
  description: |
    Retrieves a gym by its unique ID with automatic authorization:
    
    **Authorization Logic**:
    - **Platform Admins**: Can access ANY gym
    - **Tenant Users**: Can ONLY access their OWN gym (validated via JWT gym ID)
    
    **Security**: 
    - Gym context extracted from JWT token (no headers required)
    - Access validation based on JWT claims, not request headers
  security:
    - bearerAuth: []
  parameters:
    - in: path
      name: id
      required: true
      schema:
        type: string
        format: uuid
      description: The unique identifier of the gym to retrieve
  responses:
    "200":
      description: Gym found
      content:
        application/json:
          schema:
            $ref: "../../openapi.yaml#/components/schemas/GymResponseDTO"
    "400":
      $ref: "../../components/responses.yaml#/BadRequest"
    "404":
      $ref: "../../components/responses.yaml#/NotFound"

delete:
  tags:
    - Gym
  summary: Delete a gym by ID
  description: |
    Deletes a gym by its unique ID.
    
    **Authorization**: PLATFORM ADMINS ONLY
    - Only users with `platform_admin` type can delete gyms
    - Tenant users will receive 403 Forbidden response
    
    **Security**: 
    - Uses JWT token for authentication (no headers required)
    - Authorization based on user type from JWT claims
  security:
    - bearerAuth: []
  parameters:
    - in: path
      name: id
      required: true
      schema:
        type: string
      description: The unique identifier of the gym to delete
  responses:
    "200":
      description: Gym deleted successfully
      content:
        application/json:
          schema:
            $ref: "../../openapi.yaml#/components/schemas/APIResponse"
    "400":
      $ref: "../../components/responses.yaml#/BadRequest"
    "404":
      $ref: "../../components/responses.yaml#/NotFound"
